{
	"id": "9b099892-5ce5-4b6d-a28c-f0626d1b774a",
	"createdAt": "2022-07-13T16:36:10.198Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [],
	"apis": [],
	"name": "HRIA_RULE_ENGINE_GSTR_NOTIFICATION",
	"ver": "22.7.14.1143",
	"description": "Rule Engine script to check whether GSTR to be notified or not.",
	"content": [
		"==OBJECT STRING==",
		"async function gstr_notification() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        const g_salOfferTxt = '\\n Salary Offered USD';\r",
		"        const g_maxTgtSalOfferTxt = '\\n Maximum Target Salary Offer';\r",
		"\r",
		"        //input parameters\r",
		"        let salOfferedUSD = req.body && req.body.salOfferedUSD ? req.body.salOfferedUSD : ''; //salary offered by user\r",
		"        let maxTgtSalOffer = req.body && req.body.maxTgtSalOffer ? req.body.maxTgtSalOffer : ''; //max target salary\r",
		"\r",
		"\r",
		"        const candidateObj = {\r",
		"            candidateName: req.body && req.body.candidateName ? req.body.candidateName : '',\r",
		"            hireType: req.body && req.body.hireType ? req.body.hireType : '',\r",
		"            yearsExp: req.body && req.body.yearsExp ? req.body.yearsExp : '',\r",
		"            country: req.body && req.body.country ? req.body.country : ''\r",
		"        }\r",
		"\r",
		"        const jobObj = {\r",
		"            jobTitle: req.body && req.body.jobTitle ? req.body.jobTitle : '',\r",
		"            region: req.body && req.body.region ? req.body.region : '',\r",
		"            jobPostCountry: req.body && req.body.jobPostCountry ? req.body.jobPostCountry : ''\r",
		"        }\r",
		"\r",
		"        /*\r",
		"        STEP 0:\r",
		"        check if the above parameters are available\r",
		"        */\r",
		"        let errstatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        if (salOfferedUSD === undefined || salOfferedUSD === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push(g_salOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (maxTgtSalOffer === undefined || maxTgtSalOffer === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push(g_maxTgtSalOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (errstatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Please have the following missing information available: \\n' + errMsg.toString()\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 1:\r",
		"        what if the input paramters are not NUMBERS\r",
		"        */\r",
		"        let invalidStatus = false;\r",
		"        let invalidMsg = [];\r",
		"\r",
		"        if (isNaN(salOfferedUSD)) {\r",
		"            invalidStatus = true;\r",
		"            invalidMsg.push(g_salOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (isNaN(maxTgtSalOffer)) {\r",
		"            invalidStatus = true;\r",
		"            invalidMsg.push(g_maxTgtSalOfferTxt);\r",
		"        }\r",
		"\r",
		"\r",
		"        if (invalidStatus && invalidMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Please have the following invalid parameter amended: \\n' + invalidMsg.toString()\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 2: ALL GOOD TO proceed with the difference in salary calulation\r",
		"        SALARY DIFFERENCE: ((SAL OFFER - MAX TGT SAL OFFER) / MAX TGT SAL OFFER ) * 100\r",
		"        */\r",
		"\r",
		"        let diffSalPercent = ((salOfferedUSD - maxTgtSalOffer) / maxTgtSalOffer) * 100;\r",
		"        diffSalPercent = Number(Number(diffSalPercent).toPrecision(4));\r",
		"\r",
		"        //console.log(diffSalPercent);\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 3: once the salary difference percentage value is computed, pass this value to the RULE ENGINE & fetch the outcome\r",
		"        process logic: if the salary difference is greater than the config value maintained in the Rule then notify the GSTR\r",
		"        outcome : JSON object with notification paramter having boolean value.\r",
		"    \r",
		"\r",
		"        if true: send the notification to GSTR department for approvals.\r",
		"        if false: don't do anything\r",
		"        */\r",
		"        let notificationRes = await p9.rulesengine.execute({ salaryDiffPercentValue: diffSalPercent }, \"8cf1fca5-7d8a-4a17-997a-7e09d4c602ff\");\r",
		"\r",
		"        //console.log(notificationRes);\r",
		"\r",
		"        notificationRes = JSON.parse(notificationRes);\r",
		"\r",
		"        //console.log(notificationRes.doNotifyGSTR);\r",
		"        //console.log(typeof (notificationRes.doNotifyGSTR));\r",
		"\r",
		"        if (notificationRes) {\r",
		"            /*\r",
		"            defined rule available\r",
		"            */\r",
		"            switch (notificationRes.doNotifyGSTR) {\r",
		"\r",
		"                case true:\r",
		"                    /*\r",
		"                    SEND NOTIFICATION TO GSTR DEPARTMENT\r",
		"                    */\r",
		"                    let toUserEmail = 'vsawan10@its.jnj.com';\r",
		"                    let subject = 'GSHR ACTION -- Approval required on Submitted Offer';\r",
		"                    let mailBody = \"<div>Dear GSTR DEPARTMENT USER,</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>A Submitted offer has been assigned to you for your approvals</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>CANDIDATE DETAILS:</b></div>\" +\r",
		"                        \"<div><b>Candidate Name: </b>\" + candidateObj.candidateName + \"</div>\" +\r",
		"                        \"<div><b>Hire Type: </b>\" + candidateObj.hireType + \"</div>\" +\r",
		"                        \"<div><b>Years of Experience: </b>\" + candidateObj.yearsExp + \"</div>\" +\r",
		"                        \"<div><b>Country from: </b>\" + candidateObj.country + \"</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>JOB DETAILS:</b></div>\" +\r",
		"                        \"<div><b>Title: </b>\" + jobObj.jobTitle + \"</div>\" +\r",
		"                        \"<div><b>Region: </b>\" + jobObj.region + \"</div>\" +\r",
		"                        \"<div><b>Country: </b>\" + jobObj.jobPostCountry + \"</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>This Offer was sent for your approvals since the Salary offered is \" +\r",
		"                        diffSalPercent + \"% \" +\r",
		"                        \"greater than the Maximum target Salary Offer which surpasses the threshold of \" + notificationRes.thresholdValue + \"%</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>Thank you,</div>\" +\r",
		"                        \"<div>GSHR SYSTEM</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>Note: Please do not respond to this email. This is a system generated email.</b></div>\";\r",
		"\r",
		"                    await sendEmail(toUserEmail, subject, mailBody, \"GSHR-System-Admin-DoNotReply@its.jnj.com\");\r",
		"\r",
		"                    log.info('[HRIA_RULE_ENGINE_GSTR_NOTIFICATION] email sent to -- ' + toUserEmail);\r",
		"\r",
		"                    result = {\r",
		"                        message: 'Offer process completed. \\nEmail Notification has been sent to ' + toUserEmail + ' from the GSTR DEPARTMENT'\r",
		"                    }\r",
		"                    break;\r",
		"\r",
		"                case false:\r",
		"                    /*\r",
		"                    DONT SEND ANY NOTIFICATION\r",
		"                    */\r",
		"                    result = {\r",
		"                        message: 'Offer Process Completed.'\r",
		"                    }\r",
		"                    break;\r",
		"\r",
		"            }\r",
		"\r",
		"            result.statusFlag = 'S';\r",
		"            result.diffSalPercent = diffSalPercent;\r",
		"            result.queryMsg = 'operation completed in ' + ((Date.now() - startTime) / 1000) + ' seconds';\r",
		"\r",
		"        } else {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Invalid outcome received from the Rule Engine. Please check the Rule.'\r",
		"            }\r",
		"\r",
		"        }\r",
		"\r",
		"        console.log(result);\r",
		"\r",
		"        complete();\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: 'script execution failed due to -- ' + err\r",
		"        }\r",
		"\r",
		"        log.error('[HRIA_RULE_ENGINE_GSTR_NOTIFICATION] script execution failed due to -- ' + err);\r",
		"        complete();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"await gstr_notification();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "7584c1f8-716a-4e65-a26f-b5719d3ec8b8",
	"package": "b1c5d619-3e13-4bbb-875e-88eb3d2c34f7"
}