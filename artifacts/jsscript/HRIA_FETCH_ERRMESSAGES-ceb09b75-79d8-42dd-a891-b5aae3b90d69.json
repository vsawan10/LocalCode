{
	"id": "ceb09b75-79d8-42dd-a891-b5aae3b90d69",
	"createdAt": "2022-07-07T20:45:17.031Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [
		{
			"id": "0fc25a89-2c2e-4d18-baf7-e7aba854e6b8",
			"name": "hria_errormessages",
			"contextname": "hria_errormessages"
		}
	],
	"apis": [],
	"name": "HRIA_FETCH_ERRMESSAGES",
	"ver": "22.7.7.196",
	"description": "script to fetch all the error messages for HRIA based on application",
	"content": [
		"==OBJECT STRING==",
		"async function fetch_error_messages() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"        let appName = req.body.appName ? req.body.appName : '';\r",
		"\r",
		"        if (appName === '') {\r",
		"            fail();\r",
		"        }\r",
		"\r",
		"        //query parameters\r",
		"        const queryWhere = 'UPPER(em.applicationName) = UPPER(:appName)';\r",
		"        const queryValues = {\r",
		"            appName: appName.toUpperCase().trim()\r",
		"        }\r",
		"\r",
		"        //actual query\r",
		"        let selectDB = [\r",
		"            'em.applicationName AS app',\r",
		"            'em.errorMessage AS errmessage',\r",
		"            'em.functionality AS functionality',\r",
		"            'em.technicalName AS techname'\r",
		"        ];\r",
		"\r",
		"        let errMsg = []\r",
		"        errMsg = await entities.hria_errormessages\r",
		"            .createQueryBuilder('em')\r",
		"            .select(selectDB)\r",
		"            .where(queryWhere, queryValues)\r",
		"            .getRawMany()\r",
		"\r",
		"\r",
		"        log.info('script [HRIA_FETCH_ERRORMSGS] fetched error messages of count -- ' + errMsg.length);\r",
		"\r",
		"\r",
		"        let formattedErrMsg = [];\r",
		"        if (errMsg.length > 0) {\r",
		"            formattedErrMsg = await formatData(errMsg);\r",
		"            log.info('script [HRIA_FETCH_ERRORMSGS] pushed formatted error messages to UI having count -- ' + formattedErrMsg.length);\r",
		"\r",
		"        }\r",
		"\r",
		"        result = {\r",
		"            formattedResponse: formattedErrMsg,\r",
		"            queryMsg: \"API call Executed successfully in \" + (Date.now() - startTime) / 1000 + \" seconds\",\r",
		"        }\r",
		"\r",
		"        //console.log(result);\r",
		"\r",
		"        complete();\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        log.error('Error in executing script [HRIA_FETCH_ERRORMSGS] while performing -- ' + err);\r",
		"        fail();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"\r",
		"/*\r",
		"format function to remove \\\\n\r",
		"*/\r",
		"async function formatData(dataList) {\r",
		"\r",
		"    let arr = [];\r",
		"    let obj;\r",
		"    let data;\r",
		"\r",
		"    for (let i = 0; i < dataList.length; i++) {\r",
		"\r",
		"        obj = {};\r",
		"        data = dataList[i];\r",
		"\r",
		"        obj.errMessage = data.errmessage.replace('\\\\n', '\\n');\r",
		"        obj.app = data.app;\r",
		"        obj.techName = data.techname;\r",
		"        obj.functionality = data.functionality;\r",
		"\r",
		"        arr.push(obj);\r",
		"\r",
		"    }\r",
		"\r",
		"    return arr;\r",
		"\r",
		"}\r",
		"\r",
		"await fetch_error_messages();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "7584c1f8-716a-4e65-a26f-b5719d3ec8b8",
	"package": "b1c5d619-3e13-4bbb-875e-88eb3d2c34f7"
}