{
	"id": "c99e73c1-60e1-4bb1-aa43-c89221cdf6a3",
	"createdAt": "2022-07-08T19:42:59.847Z",
	"createdBy": "VSawan10",
	"globalScripts": [
		{
			"id": "df3d5e1d-7893-45ea-ac17-9d4e6011fe03",
			"name": "HRIA - HRIA_FETCH_RULEID",
			"contextname": "HRIA_CONSUME_RULE_TECHNAME"
		}
	],
	"externalModules": [],
	"entitySets": [],
	"apis": [],
	"name": "HRIA_RULE_ENGINE_FETCH_PGAREA",
	"ver": "22.8.4.1837",
	"description": "script to run the rule engine for PG Area",
	"content": [
		"==OBJECT STRING==",
		"async function fetch_pg_area() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"        //req.body = { \"country\": \"CANADA\", \"ruleTechName\": \"PGAREAS\" }\r",
		"\r",
		"        let country = req.body && req.body.country ? req.body.country : '';\r",
		"        let ruleTechName = req.body && req.body.ruleTechName ? req.body.ruleTechName : '';\r",
		"\r",
		"        /*\r",
		"        STEP 0:\r",
		"        INPUT PARAMETER VALIDATION\r",
		"        */\r",
		"        let errstatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        if (country === undefined || country.trim() === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Country');\r",
		"        }\r",
		"\r",
		"        if (ruleTechName === undefined || ruleTechName.trim() === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Rule Technical Name');\r",
		"        }\r",
		"\r",
		"\r",
		"        if (errstatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Please have the following mandatory information: ' + errMsg.toString()\r",
		"            }\r",
		"\r",
		"            complete();\r",
		"            return;\r",
		"        }\r",
		"\r",
		"\r",
		"        /*\r",
		"        GLOBAL SCRIPT ADDED\r",
		"        */\r",
		"        const g_res = await globals.HRIA_CONSUME_RULE_TECHNAME.fetchRuleID(ruleTechName); //global script call\r",
		"\r",
		"        if (g_res.statusFlag && g_res.statusFlag === 'F') {\r",
		"\r",
		"            log.info('[HRIA_RULE_ENGINE_FETCH_PGAREA] Error in receiving the RULE ID due to -- ' + g_res.message);\r",
		"\r",
		"            /*\r",
		"            statusFlag received as F meaning something failed in the global script.\r",
		"            DO NOT proceed with the rule engine calculation, instead complete with 200 & show message in UI\r",
		"            */\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: g_res.message\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"        }\r",
		"\r",
		"        /*\r",
		"        200 success response received from the global script.\r",
		"        continue with the RULE ENGINE EXECUTION by passing down the rule ID\r",
		"        */\r",
		"        //await fetch(ruleTechName);\r",
		"        //ENDS\r",
		"\r",
		"        const pgArea = await p9.rulesengine.execute({ country: country }, g_res.ruleID); //RULE engin UUID fetched dynamically via a global script : HRIA_FETCH_RULEID\r",
		"        console.log(pgArea)\r",
		"\r",
		"\r",
		"        result = {\r",
		"            queryMsg: 'operation completed in ' + ((Date.now() - startTime) / 1000) + ' seconds',\r",
		"            pgArea: pgArea,\r",
		"            statusFlag: 'S'\r",
		"        }\r",
		"\r",
		"        console.log(result)\r",
		"\r",
		"\r",
		"        log.info('[HRIA_RULE_ENGINE_FETCH_PGAREA] script executed & found following pgAreas - ' + pgArea)\r",
		"        complete();\r",
		"\r",
		"\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        log.error('[HRIA_RULE_ENGINE_FETCH_PGAREA] script execution failed due to -- ' + err)\r",
		"        fail();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"/*\r",
		"async function fetch(ruleTechName) {\r",
		"\r",
		"    console.log(ruleTechName);\r",
		"\r",
		"    let g_res = await globals.HRIA_CONSUME_RULE_TECHNAME.fetchRuleID(ruleTechName);\r",
		"    console.log(g_res);\r",
		"    complete();\r",
		"\r",
		"}\r",
		"*/\r",
		"\r",
		"\r",
		"await fetch_pg_area();\r",
		""
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "7584c1f8-716a-4e65-a26f-b5719d3ec8b8",
	"package": "b1c5d619-3e13-4bbb-875e-88eb3d2c34f7"
}