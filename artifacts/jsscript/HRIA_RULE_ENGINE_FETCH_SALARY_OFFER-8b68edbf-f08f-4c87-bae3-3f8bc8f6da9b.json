{
	"id": "8b68edbf-f08f-4c87-bae3-3f8bc8f6da9b",
	"createdAt": "2022-07-12T20:46:26.013Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [
		{
			"id": "9c74b95b-8c97-4f4e-be7b-8af4581e5873",
			"name": "hria_salary_comparables",
			"contextname": "hria_salary_comparables"
		}
	],
	"apis": [],
	"name": "HRIA_RULE_ENGINE_FETCH_SALARY_OFFER",
	"ver": "22.7.13.1627",
	"description": "Rule Engine script to fetch the salary offer based on years Ex difference & country",
	"content": [
		"==OBJECT STRING==",
		"async function fetch_salary_offer() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        let errstatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        /*\r",
		"        TECH NOTE:\r",
		"        based on the difference between JOB posted years of exp & candidate's years of exp && hireType,\r",
		"        the salary offers are calculated.\r",
		"\r",
		"        Salary offers such as \r",
		"        MIN TGT SALARY OFFER\r",
		"        TGT SALARY OFFER\r",
		"        MAX SALARY OFFER\r",
		"\r",
		"\r",
		"        RULE ENGINE LOGIC:\r",
		"        input parameters: years of difference and hireType\r",
		"        output response : percentage offered \r",
		"        */\r",
		"\r",
		"        /*\r",
		"        later, using the country value, the average salary is fetched from the HRIA_SALARY_COMPARABLES table\r",
		"        followed by multiplying avg salary with the percentage offered from the rule engine\r",
		"        */\r",
		"\r",
		"\r",
		"        /*\r",
		"        RULE ENGINE OPERATION\r",
		"        */\r",
		"\r",
		"        /*\r",
		"        STEP 0: INPUT PARAMETERS & VALIDATING THEM\r",
		"        */\r",
		"        //req.body = { \"yearsDiff\": 2, \"hireType\": \"EXTERNAL\", \"functionCode\": \"Finance\", \"country\": \"CANADA\" }\r",
		"        let yearsDiff = req.body.yearsDiff ? req.body.yearsDiff : '';\r",
		"        let hireType = req.body.hireType ? req.body.hireType : '';\r",
		"        let functCode = req.body.functionCode ? req.body.functionCode : '';\r",
		"        let country = req.body.country ? req.body.country : '';\r",
		"\r",
		"        if (yearsDiff === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Difference of Years of Experience')\r",
		"        }\r",
		"        if (hireType.trim() === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Hire Type')\r",
		"        }\r",
		"        if (functCode.trim() === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Function')\r",
		"        }\r",
		"        if (country.trim() === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push('\\n Country')\r",
		"        }\r",
		"\r",
		"\r",
		"        if (errstatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'The following parameters are required for Salary Offer computation -- \\n' + errMsg.toString()\r",
		"            }\r",
		"\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"        /*\r",
		"        additional check if yearsDiff is a valid number\r",
		"        if not, return here\r",
		"        */\r",
		"\r",
		"        if (isNaN(yearsDiff)) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Difference of Years of Experience must not be a valid Number'\r",
		"            }\r",
		"            //console.log(result);\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 1: computing the response from the RULE ENGINE\r",
		"        */\r",
		"        let salaryOffer = await p9.rulesengine.execute({\r",
		"            yearsDiff: yearsDiff,\r",
		"            hireType: hireType\r",
		"        }, \"276b248c-a1e3-4f84-bea2-cde4418a4327\");\r",
		"\r",
		"        salaryOffer = JSON.parse(salaryOffer);\r",
		"\r",
		"        log.info('[HRIA_RULE_ENGINE_FETCH_SALARY_OFFER] script executed by computing the following salary offer of ' + salaryOffer + ' based on yearsDiff - ' + yearsDiff + ' & hireType - ' + hireType);\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 2: fetching the average salary based on the country & functionCode.\r",
		"        */\r",
		"        //query parameters\r",
		"        let queryWhere = 'UPPER(avgSal.country) = UPPER(:country) AND UPPER(avgSal.functionCode) = UPPER(:functCode)';\r",
		"        let queryValues = {\r",
		"            functCode: functCode.toUpperCase().trim(),\r",
		"            country: country.toUpperCase().trim()\r",
		"        }\r",
		"\r",
		"\r",
		"        let selectDB = [\r",
		"            'avgSal.avgSalary AS avgsalary',\r",
		"            'avgSal.country AS country',\r",
		"            'avgSal.functionCode AS functioncode',\r",
		"            'avgSal.currency AS currencycode'\r",
		"        ]\r",
		"\r",
		"\r",
		"        let avgSalary = [];\r",
		"        avgSalary = await entities.hria_salary_comparables\r",
		"            .createQueryBuilder('avgSal')\r",
		"            .select(selectDB)\r",
		"            .where(queryWhere, queryValues)\r",
		"            .getRawMany();\r",
		"\r",
		"        //console.log(avgSalary)\r",
		"\r",
		"\r",
		"\r",
		"        log.info('[HRIA_RULE_ENGINE_FETCH_SALARY_OFFER] script executed by computing the average salary ' + avgSalary + ' based on country - ' + country + ' & function - ' + functCode);\r",
		"\r",
		"\r",
		"\r",
		"        switch (avgSalary.length) {\r",
		"\r",
		"            case 0:\r",
		"                result = {\r",
		"                    statusFlag: 'F',\r",
		"                    message: 'No average Salary data received.'\r",
		"                }\r",
		"                break;\r",
		"\r",
		"            case 1:\r",
		"\r",
		"                //console.log(typeof (salaryOffer));\r",
		"                //console.log(typeof (JSON.parse(JSON.stringify(salaryOffer))))\r",
		"                /*\r",
		"                STEP 3: proceed with the percentage computation on the average salary obtained above. \r",
		"                */\r",
		"                if (salaryOffer &&\r",
		"                    salaryOffer.minTgtOffer &&\r",
		"                    salaryOffer.tgtOffer &&\r",
		"                    salaryOffer.maxTgtOffer) {\r",
		"\r",
		"                    let s = avgSalary[avgSalary.length - 1]; //average salary based on the country and function\r",
		"\r",
		"\r",
		"                    //console.log(s);\r",
		"                    /*\r",
		"                    FINAL RESULT HAVING ALL THE 3 SALARIES\r",
		"                    */\r",
		"                    result = {\r",
		"\r",
		"                        statusFlag: 'S',\r",
		"\r",
		"                        minTgtSalOffer: (salaryOffer.minTgtOffer / 100) * s.avgsalary, //min target salary offer\r",
		"                        tgtSalOffer: (salaryOffer.tgtOffer / 100) * s.avgsalary, //target salary offer\r",
		"                        maxTgtSalOffer: (salaryOffer.maxTgtOffer / 100) * s.avgsalary, //max target salary offer\r",
		"\r",
		"                        currencyCode: s.currencycode, //local currency code\r",
		"\r",
		"                        queryMsg: 'operation completed in ' + ((Date.now() - startTime) / 1000) + ' seconds'\r",
		"\r",
		"                    }\r",
		"\r",
		"                    //console.log(result);\r",
		"                } else {\r",
		"                    result = {\r",
		"                        statusFlag: 'F',\r",
		"                        message: 'Invalid Salary Offers received.'\r",
		"                    }\r",
		"                }\r",
		"                break;\r",
		"\r",
		"\r",
		"            default:\r",
		"                result = {\r",
		"                    statusFlag: 'F',\r",
		"                    message: 'More than sufficient amount of average salaries received.'\r",
		"                }\r",
		"                break;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"        log.info('[HRIA_RULE_ENGINE_FETCH_SALARY_OFFER] script executed by computing the following salary offer of ' + salaryOffer + ' based on yearsDiff - ' + yearsDiff + ' & hireType - ' + hireType);\r",
		"        complete();\r",
		"\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: 'script execution failed due to -- ' + err\r",
		"        }\r",
		"\r",
		"        log.error('[HRIA_RULE_ENGINE_FETCH_SALARY_OFFER] script execution failed due to -- ' + err);\r",
		"        complete();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"await fetch_salary_offer();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "7584c1f8-716a-4e65-a26f-b5719d3ec8b8",
	"package": "b1c5d619-3e13-4bbb-875e-88eb3d2c34f7"
}